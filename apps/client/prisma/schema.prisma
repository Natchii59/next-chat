generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique @default(nanoid(15)) @db.VarChar(15)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  threads  Thread[]
  likes    ThreadLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Thread {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  likes ThreadLike[]

  @@map("threads")
}

model ThreadLike {
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String @map("thread_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @map("user_id")

  @@id([threadId, userId])
  @@map("threads_likes")
}
